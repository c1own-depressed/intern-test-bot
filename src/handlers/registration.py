from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from typing import Callable, Any
from functools import wraps
import re

# –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –Ω–∞—à–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
from ..core.states import RegistrationStates  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ states —Ç—É—Ç
from ..services.registration_service import RegistrationService, RegistrationError
from ..database.session import get_db  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ get_db —Ç—É—Ç

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –∑–±–æ—Ä—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
registration_router = Router()


# --- –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è MarkdownV2 ---
def escape_markdown_v2(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–∏–º–≤–æ–ª–∏, –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ –≤ Telegram MarkdownV2."""
    reserved_chars = r"([_*[\]()~`>#+\-=|{}.!])"
    return re.sub(reserved_chars, r'\\\1', text)


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –ë–î (–±–µ–∑ –∑–º—ñ–Ω) ---
def with_db_session(func: Callable):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –ë–î —Ç–∞ —ó—ó –∑–∞–∫—Ä–∏—Ç—Ç—è.
    """

    @wraps(func)
    async def wrapper(message: types.Message, state: FSMContext, *args, **kwargs: Any):
        # –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É get_db() –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
        for db_session in get_db():
            return await func(message=message, state=state, db_session=db_session)

    return wrapper


# --- 1. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ---
@registration_router.message(CommandStart())
@with_db_session
async def handle_start(message: types.Message, state: FSMContext, db_session: Session):
    user_id = message.from_user.id
    service = RegistrationService(db_session)

    try:
        intern_name = service.get_intern_name_by_telegram_id(user_id)
        safe_intern_name = escape_markdown_v2(intern_name)

        await state.set_state(RegistrationStates.main_menu)

        await message.answer(
            f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {safe_intern_name}\! –í–∏ –≤–∂–µ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ\.",
            parse_mode="MarkdownV2"
        )

    except RegistrationError:
        await state.set_state(RegistrationStates.awaiting_pin)

        await message.answer(
            r"üëã –í—ñ—Ç–∞—é\!" + "\n" + r"–©–æ–± –ø–æ—á–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ü–Ü–ù –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó\.",
            parse_mode="MarkdownV2"
        )


# --- 2. –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –ü–Ü–ù–∞ ---
@registration_router.message(RegistrationStates.awaiting_pin, F.text)
@with_db_session
async def handle_pin_input(message: types.Message, state: FSMContext, db_session: Session):
    pin = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username

    service = RegistrationService(db_session)

    try:
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞
        full_name = service.register_user(
            telegram_id=user_id,
            telegram_tag=username,
            pin=pin
        )

        safe_full_name = escape_markdown_v2(full_name)

        await state.set_state(RegistrationStates.main_menu)

        await message.answer(
            f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞\!\n\n"
            f"–í—ñ—Ç–∞—î–º–æ, {safe_full_name}\. –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\.",
            parse_mode="MarkdownV2"
        )

    except RegistrationError as e:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ (–ü–Ü–ù –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ü–Ü–ù –∑–∞–π–Ω—è—Ç–∏–π, IntegrityError)
        safe_error_message = escape_markdown_v2(str(e))

        await message.answer(
            r"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\: " + safe_error_message + "\n" + r"–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ü–Ü–ù —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\.",
            parse_mode="MarkdownV2"
        )

    except Exception:
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —â–æ—Å—å –ø—ñ–¥–µ –Ω–µ —Ç–∞–∫)
        await message.answer(
            r"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞\. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\.",
            parse_mode="MarkdownV2"
        )
