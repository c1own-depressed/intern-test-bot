import os
import re
import requests
import json
from typing import Any
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from googleapiclient.errors import HttpError
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

from ..core.config import settings
from ..database.models import Question, AnswerOption, UserAnswer  # ‚ùóÔ∏è –î–û–î–ê–ù–û UserAnswer
from .google_sheet_importer import ImportError

# –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó —Ç–∏–ø—É "1. ", "2.", "Q: "
QUESTION_START_REGEX = re.compile(r'^\s*(\d+\.?\s*|Q\s*:\s*)?')

# üéØ –§–†–ê–ó–ê –î–õ–Ø –Ü–ì–ù–û–†–£–í–ê–ù–ù–Ø
EXCLUDED_PHRASE = "–î–æ —è–∫–æ–≥–æ —Ç–∏–ø—É –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è —Ü–µ–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –ø–∞—Ä—ñ–Ω–Ω—è?"


class GoogleDocsImporter:
    """
    –ö–ª–∞—Å –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –ø–∏—Ç–∞–Ω—å, –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Google Docs/Drive.
    """

    def __init__(self):
        try:
            credentials_info = json.loads(settings.GOOGLE_CREDENTIALS_JSON)
        except json.JSONDecodeError:
            raise ImportError("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É GOOGLE_CREDENTIALS_JSON. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–º—ñ–Ω–Ω–æ—ó —É .env.")
        except AttributeError:
            raise ImportError("–ó–º—ñ–Ω–Ω–∞ GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.")

        self.creds = Credentials.from_service_account_info(credentials_info)
        self.docs_service = build('docs', 'v1', credentials=self.creds)
        self.drive_service = build('drive', 'v3', credentials=self.creds)
        os.makedirs(settings.PHOTO_DIR, exist_ok=True)

    # ------------------- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ -------------------

    def _is_green(self, rgb_color: dict) -> bool:
        if rgb_color:
            r, g, b = rgb_color.get('red', 0), rgb_color.get('green', 0), rgb_color.get('blue', 0)
            return g > 0.15 and g > r + 0.1 and g > b + 0.1
        return False

    def _download_image(self, file_id: str, file_extension: str = 'png') -> str | None:
        try:
            if self.creds.expired and self.creds.refresh_token:
                self.creds.refresh(requests.Request())

            download_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"
            filename = f"q_{file_id}.{file_extension}"
            filepath = os.path.join(settings.PHOTO_DIR, filename)
            headers = {'Authorization': f'Bearer {self.creds.token}'}

            response = requests.get(download_url, headers=headers, stream=True)
            response.raise_for_status()

            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            print(f"      [DRIVE SUCCESS] –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {file_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {filename}")
            return filepath
        except Exception as e:
            print(f"      [DOWNLOAD ERROR] –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {file_id}: {e}")
            return None

    def _extract_text_content_and_style(self, element: Any, document: Any) -> tuple[str, bool, str | None]:
        text_content, is_correct_style, image_id = "", False, None
        if 'paragraph' in element:
            for elem in element.get('paragraph').get('elements', []):
                if 'textRun' in elem:
                    text_run = elem.get('textRun', {})
                    text_content += text_run.get('content', '')
                    rgb = text_run.get('textStyle', {}).get('foregroundColor', {}).get('color', {}).get('rgbColor', {})
                    if self._is_green(rgb):
                        is_correct_style = True
                elif 'inlineObjectElement' in elem:
                    inline_obj_id = elem['inlineObjectElement']['inlineObjectId']
                    embedded_object = document.get('inlineObjects', {}).get(inline_obj_id, {}).get(
                        'inlineObjectProperties', {}).get('embeddedObject', {})
                    if 'imageProperties' in embedded_object:
                        content_uri = embedded_object['imageProperties'].get('contentUri')
                        if content_uri:
                            match = re.search(r'(?:id=|/d/)([a-zA-Z0-9_-]+)', content_uri)
                            if match:
                                image_id = match.group(1)
            text_content = text_content.replace('\xa0', ' ').strip()
        return text_content, is_correct_style, image_id

    def _save_question_to_db(self, db: Session, q_text: str, photo_path: str | None, options: list):
        try:
            current_question = Question(text=q_text, photo_url=photo_path)
            db.add(current_question)
            db.flush()
            if not any(opt['is_correct'] for opt in options):
                print(f"      [WARNING] –ü–∏—Ç–∞–Ω–Ω—è '{q_text[:50]}...' –Ω–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
            for opt in options:
                db.add(AnswerOption(question_id=current_question.id, text=opt['text'], is_correct=opt['is_correct']))
        except Exception as e:
            print(f"      [ERROR] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è '{q_text[:30]}...': {e}")

    # ------------------- –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–º–ø–æ—Ä—Ç—É -------------------

    def import_questions(self, db: Session):
        print("      [Importer] –ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –ø–∏—Ç–∞–Ω—å –∑ Google Docs...")
        try:
            document = self.docs_service.documents().get(documentId=settings.QUESTION_DOC_ID).execute()
        except HttpError as e:
            raise ImportError(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Docs: {e}.")

        # ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –û–°–¨ –ó–ú–Ü–ù–ê ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        try:
            # 1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏ (–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
            db.query(UserAnswer).delete(synchronize_session=False)

            # 2. –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ (–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)
            db.query(AnswerOption).delete(synchronize_session=False)

            # 3. –Ü –Ω–∞–æ—Å—Ç–∞–Ω–æ–∫ - —Å–∞–º—ñ –ø–∏—Ç–∞–Ω–Ω—è
            db.query(Question).delete(synchronize_session=False)

            db.commit()
            print("      [INFO] –°—Ç–∞—Ä—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            db.rollback()
            print(f"      [WARNING] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ: {e}")

        elements = document.get('body', {}).get('content', [])
        current_question_text, current_options, current_image_id = None, [], None
        question_count, is_ignoring_block = 0, False

        for element in elements:
            text_content, is_correct, element_image_id = self._extract_text_content_and_style(element, document)
            if element_image_id:
                current_image_id = element_image_id
            if not text_content:
                continue

            if text_content.endswith(':'):
                if EXCLUDED_PHRASE in text_content:
                    is_ignoring_block = True
                    current_question_text = None
                    continue
                if current_question_text and current_options:
                    photo_path = self._download_image(current_image_id) if current_image_id else None
                    self._save_question_to_db(db, current_question_text, photo_path, current_options)
                    question_count += 1
                current_question_text = QUESTION_START_REGEX.sub('', text_content).strip()
                current_options, current_image_id, is_ignoring_block = [], element_image_id, False
            elif is_ignoring_block:
                continue
            elif current_question_text and text_content.startswith('-'):
                option_text = text_content.lstrip('-').strip()
                if option_text:
                    current_options.append({'text': option_text, 'is_correct': is_correct})
            elif current_question_text:
                current_question_text = (current_question_text + " " + text_content).strip()

        if current_question_text and current_options and not is_ignoring_block:
            photo_path = self._download_image(current_image_id) if current_image_id else None
            self._save_question_to_db(db, current_question_text, photo_path, current_options)
            question_count += 1

        try:
            db.commit()
            print(f"      [Importer] –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {question_count} –ø–∏—Ç–∞–Ω—å.")
        except IntegrityError as e:
            db.rollback()
            raise ImportError(f"–ü–æ–º–∏–ª–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –ë–î –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –ø–∏—Ç–∞–Ω—å: {e}")