# services/reporting_service.py

import datetime
from sqlalchemy.orm import Session
from sqlalchemy import func
from aiogram import Bot
import re
import io

# –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –Ω–∞—à–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
from ..database.models import User, Intern, TestSession, UserAnswer, Question, AnswerOption
from ..core.config import settings
from ..database.session import get_db

# --- –Ü–ú–ü–û–†–¢–ò –î–õ–Ø GOOGLE DOCS API ---
# –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# ----------------------------------------

# SCOPE –¥–ª—è Google Docs API:
DOCS_SCOPE = ["https://www.googleapis.com/auth/documents"]


class ReportingService:
    def __init__(self, db_session: Session, bot: Bot):
        self.db = db_session
        self.bot = bot
        self.docs_service = self._authenticate_google_docs()

    def _authenticate_google_docs(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google Docs API."""
        try:
            creds = Credentials.from_service_account_file(
                settings.GOOGLE_CREDENTIALS_FILE,
                scopes=DOCS_SCOPE
            )
            return build('docs', 'v1', credentials=creds)
        except Exception as e:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ê–£–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á GOOGLE DOCS: {e}")
            return None

    def _escape_md(self, text: str) -> str:
        """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ MarkdownV2."""
        if not text:
            return ""
        return re.sub(r'([_*[\]()~`>#+=\-{|}.!])', r'\\\1', text)

    # üéØ –ú–ï–¢–û–î –î–õ–Ø TELEGRAM
    def generate_detailed_report(self, session_id: int) -> str | None:
        """
        –§–æ—Ä–º—É—î –ø–æ–≤–Ω–∏–π –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å–µ—Å—ñ—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ MarkdownV2.
        """
        session = self.db.query(TestSession).filter(TestSession.id == session_id).one_or_none()
        if not session:
            return None

        user: User = session.user
        intern: Intern = user.intern

        intern_name = intern.full_name if intern else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ –ø—Ä–æ—Ñ—ñ–ª—é (ID: {user.telegram_id})"

        score = session.score or 0
        max_score = session.max_score or 1
        percentage = round((score / max_score) * 100, 2) if max_score > 0 else 0

        time_spent = "‚Äî"
        if session.start_time and session.end_time:
            duration = session.end_time - session.start_time
            total_seconds = int(duration.total_seconds())
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            time_spent = f"{minutes} —Ö–≤ {seconds} —Å–µ–∫"

        report_parts = []

        # --- –®–ê–ü–ö–ê ---
        header = (
            f"üöÄ *–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É*\n\n"
            f"-----------------------------------------\n"
            f"üë§ *–°—Ç–∞–∂–µ—Ä:* {self._escape_md(intern_name)}\n"
            f"üÜî *Telegram ID:* `{user.telegram_id}`\n"
            f"-----------------------------------------\n"
            f"üåü *–†–µ–∑—É–ª—å—Ç–∞—Ç:* *{score}/{max_score}* \\({percentage}\\%\\)\n"
            f"‚è±Ô∏è *–ß–∞—Å:* `{self._escape_md(time_spent)}`\n"
            f"üìÖ *–î–∞—Ç–∞/–ß–∞—Å:* {session.end_time.strftime('%Y\\-%m\\-%d %H:%M:%S') if session.end_time else '‚Äî'}\n"
            f"-----------------------------------------\n\n"
        )
        report_parts.append(header)

        # --- –í–Ü–î–ü–û–í–Ü–î–Ü ---
        answers_data = self.db.query(UserAnswer).filter(UserAnswer.session_id == session_id).order_by(
            UserAnswer.id).all()

        for i, answer in enumerate(answers_data, 1):
            question: Question = answer.question
            selected_option: AnswerOption = answer.selected_option
            correct_option: AnswerOption = (
                self.db.query(AnswerOption)
                .filter(AnswerOption.question_id == question.id, AnswerOption.is_correct == True)
                .first()
            )

            status_emoji = "üü¢" if answer.is_correct else "üî¥"

            detail = (
                f"{status_emoji} *{i}\\. –ü–∏—Ç–∞–Ω–Ω—è:* {self._escape_md(question.text)}\n"
                f"   \\- *–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞–∂–µ—Ä–∞:* {self._escape_md(selected_option.text)}\n"
                f"   \\- *–°—Ç–∞—Ç—É—Å:* {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' if answer.is_correct else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}\n"
                f"   \\- *–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:* {self._escape_md(correct_option.text if correct_option else 'N/A')}\n\n"
            )
            report_parts.append(detail)

        return "".join(report_parts)

    # üéØ –û–ù–û–í–õ–ï–ù–ò–ô –ö–†–ê–°–ò–í–ò–ô –ó–í–Ü–¢ –î–õ–Ø GOOGLE DOC
    def _generate_report_for_doc(self, session_id: int) -> str | None:
        """
        –§–æ—Ä–º—É—î –≥–∞—Ä–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è Google Doc.
        """
        session = self.db.query(TestSession).filter(TestSession.id == session_id).one_or_none()
        if not session:
            return None

        user: User = session.user
        intern: Intern = user.intern
        intern_name = intern.full_name if intern else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ –ø—Ä–æ—Ñ—ñ–ª—é (ID: {user.telegram_id})"

        score = session.score or 0
        max_score = session.max_score or 1
        percentage = round((score / max_score) * 100, 2) if max_score > 0 else 0

        time_spent = "‚Äî"
        if session.start_time and session.end_time:
            duration = session.end_time - session.start_time
            total_seconds = int(duration.total_seconds())
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            time_spent = f"{minutes} —Ö–≤ {seconds} —Å–µ–∫"

        report_parts = []

        # --- –®–ê–ü–ö–ê ---
        report_parts.append("üìë –ó–í–Ü–¢ –ü–†–û –ü–†–û–•–û–î–ñ–ï–ù–ù–Ø –¢–ï–°–¢–£\n\n")
        report_parts.append(f"üë§ –°—Ç–∞–∂–µ—Ä: {intern_name}\n")
        report_parts.append(f"üÜî Telegram ID: {user.telegram_id}\n")
        report_parts.append(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {session.end_time.strftime('%Y-%m-%d %H:%M:%S') if session.end_time else '‚Äî'}\n")
        report_parts.append(f"‚≠ê –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} ({percentage}%)\n")
        report_parts.append(f"‚è±Ô∏è –ß–∞—Å: {time_spent}\n\n")

        report_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

        # --- –°–ü–ò–°–û–ö –ü–ò–¢–ê–ù–¨ ---
        answers_data = self.db.query(UserAnswer).filter(UserAnswer.session_id == session_id).order_by(
            UserAnswer.id).all()

        for i, answer in enumerate(answers_data, 1):
            question: Question = answer.question
            selected_option: AnswerOption = answer.selected_option
            correct_option: AnswerOption = self.db.query(AnswerOption).filter(
                AnswerOption.question_id == question.id, AnswerOption.is_correct == True
            ).first()

            status = '‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' if answer.is_correct else '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'

            detail = (
                f"üìå –ü–∏—Ç–∞–Ω–Ω—è {i}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üîπ –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:\n"
                f"   {question.text}\n\n"
                f"üîπ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞–∂–µ—Ä–∞:\n"
                f"   {selected_option.text}\n\n"
                f"üîπ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:\n"
                f"   {correct_option.text if correct_option else 'N/A'}\n\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
            report_parts.append(detail)

        report_parts.append("üìå –ö—ñ–Ω–µ—Ü—å –∑–≤—ñ—Ç—É\n")

        return "".join(report_parts)

    async def _write_to_google_doc(self, doc_id: str, report_content: str):
        """
        –î–æ–¥–∞—î —Ç–µ–∫—Å—Ç —É –∫—ñ–Ω–µ—Ü—å –≤–∫–∞–∑–∞–Ω–æ–≥–æ Google Doc.
        """
        if not self.docs_service:
            print("‚ùå Google Docs Service –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å—É.")
            return

        requests = [
            {
                'insertText': {
                    'text': report_content + "\n\n",
                    'endOfSegmentLocation': {}
                }
            }
        ]

        try:
            self.docs_service.documents().batchUpdate(
                documentId=doc_id, body={'requests': requests}
            ).execute()
            print(f"‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ —É Google Doc ID: {doc_id}")
        except HttpError as err:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Google Docs API: {err}")
            raise
        except Exception as e:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É Google Doc: {e}")
            raise

    async def send_report_to_admin(self, session_id: int):
        """
        –ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç, –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (Telegram)
        —Ç–∞ –∑–∞–ø–∏—Å—É—î –π–æ–≥–æ —É Google Doc.
        """
        telegram_report = self.generate_detailed_report(session_id)
        doc_report = self._generate_report_for_doc(session_id)

        try:
            admin_id = settings.ADMIN_CHAT_ID
        except AttributeError:
            admin_id = None

        if telegram_report and admin_id:
            try:
                await self.bot.send_message(
                    chat_id=admin_id,
                    text=telegram_report,
                    parse_mode="MarkdownV2"
                )
                print(f"‚úÖ –ó–≤—ñ—Ç –ø—Ä–æ —Å–µ—Å—ñ—é {session_id} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_id}).")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        if doc_report and hasattr(settings, 'REPORT_DOC_ID') and settings.REPORT_DOC_ID:
            try:
                await self._write_to_google_doc(settings.REPORT_DOC_ID, doc_report)
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –∑–≤—ñ—Ç —É Google Doc: {e}")


# üéØ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def finalise_session_and_report(session_id: int, bot: Bot):
    """
    –û–±–≥–æ—Ä—Ç–∫–∞, —â–æ –Ω–∞–¥–∞—î —Å–µ—Å—ñ—é –ë–î, —Å—Ç–≤–æ—Ä—é—î ReportingService —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç.
    """
    for db in get_db():
        reporting_service = ReportingService(db, bot)
        await reporting_service.send_report_to_admin(session_id)
        break
